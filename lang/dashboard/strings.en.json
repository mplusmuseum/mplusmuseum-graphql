{
    "general": {
        "mplusapi": "M+ API",
        "logout": "Logout",
        "login": "Log In/Sign Up"
    },
    "documentation": {
        "title": "API Documentation",
        "aboutapi": "About the M+ API",
        "background": "Background",
        "thedata": "The Data",
        "access": "Technical documentation and access",
        "documentation": "GraphQL Documentation",
        "apidocumentation": "GraphQL Documentation",
        "yourapitoken": "Your API Token",
        "apitoken": "API Token",
        "endpoint": "The M+ API Endpoint",
        "graphqlendpoint": "GraphQL API Endpoint",
        "intro": "Here you can find out all about how to make GraphQL calls. Remember you will need your developer key which you can always find on the main <a href=\"/developer\">Developers Help</a> page, but it's also here:",
        "note": " <strong>NOTE:</strong> This documentation is very new and evolving but should be enough to get you up and running, we will be expanding it in the near future.",
        "TOC": "Table of Contents",
        "about-graphql": "How to Use the M+ API",
        "communicating-with-graphql": "How to Communicate with the M+ API",
        "graphql-playground": "M+ API Playground",
        "graphql-queries": "M+ API Queries",
        "introspection": "Introspection",
        "objects": "Objects",
        "paginationandfilter": "Pagination and filtering",
        "sorting": "Sorting",
        "bycolour": "Filtering/Searching by Colour",
        "fetchingbyids": "Fetching by ids",
        "object": "Querying a single object",
        "randomobjects": "Random Objects",
        "areas": "Areas",
        "categories": "Categories",
        "mediums": "Mediums",
        "archivallevels": "Archival Levels",
        "fonds": "Archival Fonds",
        "constituents": "Constituents",
        "constituent": "Constituent",
        "makertypes": "Maker Types",
        "must-be-logged-in": "You must be logged in to see the documentation",
        "sigg-online": "Online Exhibition: <em>Mapping Chinese Art, 1972–2012</em>",
        "sigg-online-short": "Sigg Online",
        "getting-started": "Getting Started",
        "object-rights": "Object Image Rights",
        "concepts": "Concepts",
        "exhibitions": "Exhibitions",
        "exhibition": "Exhibition",
        "timeline": "Timeline and Historical Events",
        "bibliographies": "Bibliographies",
        "terms-of-use": "Terms of Use",
        "contact": "Contact",
        "privacy-policy-statement": "Privacy Policy Statement",
        "nesting": "Nesting Objects in Constituents and Constituents in Objects",
        "objects-connected-constituent": "Finding Objects Related to a Constituent",
        "curl": "cURL",
        "nodejs": "Node.js",
        "belowtoken": "Below is your API developer token, this is the token you'll use to sign all your API calls. Always try to keep your token private and out of public GitHub repositories.",
        "belowendpoint": "Below is the GraphQL endpoint which you'll be making your API calls against. See below for more details on how to structure calls.",
        "graphql-about-1": "The M+ API is built on <a target=\"_blank\" href=\"https://graphql.org/\">GraphQL</a>, an open-source data query language. You'll use GraphQL to request information from the M+ data set. ",
        "graphql-about-2": "Traditionally GraphQL allows two types of operations: queries and mutations. These can be thought of as read and write operations. There is also one more operation called <a href=\"#introspection\">introspection</a>, which allows you to ask the GraphQL endpoint about itself.",
        "graphql-about-3": "Below you will find examples of various calls to can make to the GraphQL endpoint.",
        "graphql-communicating-1": "Here, you will find examples of various calls that you can make to the GraphQL endpoint. The single endpoint for all API calls is...",
        "graphql-communicating-2": "GraphQL operations consist of multiline JSON. An example ‘Hello World’ GraphQL query is shown below:",
        "graphql-communicating-3": "To query GraphQL using cURL, make a <code>POST</code> request with a JSON payload as <code>--data-binary</code>. You must also include your API token as <code>bearer</code> authorisation.",
        "graphql-communicating-4": "To query using Nodejs, make sure to pass in your API token as a <code>bearer</code> token as shown below:",
        "graphql-communicating-5": "The easiest way to try out M+ API queries is to use the playground, which can be found here:",
        "graphql-communicating-6": "To see an example, click the below link. You will need to press the ‘run’ button to see the results of the query.",
        "graphql-communicating-7": "Below, you'll find a list of the current queries you can make through the M+ API.",
        "run-in-playground": "Run in the playground",
        "graphql-introspection-1": "The introspection operation is the only operation you can call using <code>GET</code>. Introspection allows you to query the M+ API schema for details about itself. Query <code>__schema</code> to list all types defined in the schema and get details about each:",
        "graphql-introspection-2": "Query <code class=\"red\">__type</code> to get details about any type:",
        "filteringthequeries": "Filtering the Queries",
        "filteringthequeries-1": "<p>You can filter the M+ API queries in a few ways. The valid filters for many of these queries are <code>page</code>, <code>per_page</code>, <code>lang</code>, <code>sort</code> and <code>sort_field</code>. Valid values for the <code>sort_field</code> are <code>title</code> and <code>count</code>. Valid values for the <code>sort</code> are <code>asc</code> and <code>desc</code>.</p><p>The <code>per_page</code> filter will limit the number of results, for example <code>(per_page: 10)</code> will return just 10 records. Unlike Objects you cannot paginate through this data set.</p><p>If there are more valid filters and values for a particular query, they will be noted in the corresponding sections below.</p>",
        "graphql-objects-1": "<p>Objects refer to individual artworks, moving image pieces and other works in the M+ Collections.</p><p>This query selects all objects, and can be filtered through certain fields, as shown below. Note: filters are <em>additive</em> rather than or, and filtering two fields will only return records that match both.</p>",
        "graphql-objects-2": "Valid filters are: <code class=\"red\">page</code>, <code class=\"red\">per_page</code>, <code class=\"red\">[ids]</code>, <code class=\"red\">lang</code>, <code class=\"red\">sort</code>, <code class=\"red\">sort_field</code>, <code class=\"red\">objectNumber</code>, <code class=\"red\">area</code>, <code class=\"red\">category</code>, <code class=\"red\">archivalLevel</code>, <code class=\"red\">medium</code>, <code class=\"red\">title</code>, <code class=\"red\">displayDate</code>, <code class=\"red\">beginDate</code>, <code class=\"red\">endDate</code>, <code class=\"red\">constituent</code>, <code class=\"red\">[constituents]</code>, <code class=\"red\">exhibition</code>, and <code class=\"red\">keyword</code>",
        "graphql-objects-3": "Note: The filters <code>collectionName</code>, <code>collectionCode</code>, and <code>collectionType</code> can be used to differentiate between Collections results and Archives results. These filters are related to the Archives-specific queries.",
        "graphql-objects-4": "Valid values for the <code class=\"red\">sort_field</code> are <code>id</code>, <code>objectNumber</code>, <code>sortNumber</code>, <code>title</code>, <code>displayDate</code>, <code>beginDate</code>, <code>endDate</code>, <code>popularCount</code>, <code>area</code>, <code>medium</code>, <code>archivalLevel</code> and <code>category</code>, values for <code class=\"red\">sort</code> are <code>asc</code> and <code>desc</code>.",
        "valid-lang": "The only valid values for <code>lang</code> are <code>en</code> and <code>zh-hant</code>. The default is en, so if a record doesn't have values that match the selected language, it will return the <code>en</code> version (if there is one).",
        "graphql-objects-5": "Here is a simple call to get all object ids",
        "object-pagination": "Here we are asking for slightly more information, note how we can use the <code class=\"red\">per_page</code> filter to limit the number of results.",
        "object-sort-example": "Here is an example of sorting by <code>sortNumber</code>.",
        "object-by-ids-example": "You can also ask for specific objects by passing in an array of <code>ids</code>.",
        "object-1": "You can get a single object by passing in the <code>id</code> parameter. Here we are showing all the fields possible.",
        "filter-by-colours": "Filtering/Searching by Colour",
        "filter-by-colours-1": "If you wish to search for objects by colour, you can do that with the following filters: <code class=\"red\">color</code>, <code class=\"red\">color_threshold</code> &amp; <code class=\"red\">color_source</code>.",
        "filter-by-colours-2": "There are two colour sources: <code>google</code> and <code>cloudinary</code>. The default colour source is Google and includes the following values: <code>gray</code>, <code>black</code>, <code>orange</code>, <code>brown</code>, <code>white</code>, <code>yellow</code>, <code>teal</code>, <code>blue</code>, <code>green</code>, <code>red</code>, <code>pink</code> &amp; <code>purple</code>.",
        "filter-by-colours-3": "Cloudinary offers a slightly different range of colours, including some more specific values such as: <code>gray</code>, <code>black</code>, <code>orange</code>, <code>brown</code>, <code>white</code>, <code>yellow</code>, <code>teal</code>, <code>blue</code>, <code>green</code>, <code>red</code>, <code>pink</code>, <code>purple</code>, <code>lightblue</code>, <code>olive</code>, <code>lime</code> &amp; <code>cyan</code>. To use the Cloudinary values, please specify <code>cloudinary</code> as your <code>color_source</code>.",
        "filter-by-colours-4": "<code>Color_threshold</code> lets you specify the range each colour value has. The default value is 75.0. Valid values float between 0.0 and 100.0. The higher the threshold, the fewer the results. (The higher the threshold, the more prevalent a specific colour is within an image).",
        "filter-by-colours-5": "You can also ask for <code>predominant</code> colors in the results, which will return you hex values of the predominant colours. See the example below.",
        "areas-1": "An ‘area’ is a discipline or broader category that objects can fall under, for example visual art, moving image, or design and architecture. To fetch all valid areas, run the following query.",
        "aggs-filters": "Valid filters are <code class=\"red\">page</code>, <code class=\"red\">per_page</code>, <code class=\"red\">lang</code>, <code class=\"red\">sort</code> and <code class=\"red\">sort_field</code>.",
        "aggs-sort": "Valid values for the <code class=\"red\">sort_field</code> are <code>title</code> and <code>count</code>. Valid values for the <code class=\"red\">sort</code> are <code>asc</code> and <code>desc</code>.",
        "aggs-per-page": "The <code class=\"red\">per_page</code> filter will limit the number of results, for example <code>(per_page: 10)</code> will return just ten records. Unlike objects you cannot paginate through this data set.",
        "filter-by-area-title": "Filtering Objects by Area",
        "filter-by-area": "To filter objects by area, run an object query with <code>(area: \"XXX\")</code> where ‘XXX’ is a specific area id.",
        "filter-by-category-title": "Filtering Objects by Category",
        "filter-by-category": "To filter objects by category, run an object query with <code>(category: \"XXX\")</code> where ‘XXX’ is a specific category id.",
        "category-1": "Categories refer to classification of object types, such as painting, furniture, and more. To fetch all the valid categories, run the following query.",
        "medium-1": "Mediums refer to the materials an object is made of. To fetch all valid mediums, run the following query.",
        "filter-by-medium-title": "Filtering Objects by Medium",
        "filter-by-medium": "To filter objects by medium, run an object query with <code>(medium: \"XXX\")</code> where ‘XXX’ is a specific medium id.",
        "archivalLevels-1": "Archival records have a different classification hierarchy to objects. A group of archival records is called a ‘fond’, while individual objects sit on an ‘item’ level. The hierarchy of archival records is ‘fonds’, ‘sub-fonds’, ‘series’, ‘sub-series’, ‘sub-subseries’, ‘file’, ‘item’, and finally ‘piece’. To fetch all valid archival levels, run the following query.",
        "fonds-1": "Fonds are used to query fonds-level archival records within the M+ Collection Archives. To fetch all valid fonds, run the following query.",
        "fonds-2": "Below is an example of a query that is calling all of the objects that fall under a specific collection code.",
        "constituents-1": "Constituents are people and organisations connected to an object. For example, constituents may be artists, individual architects, design studios, manufacturers, or publishers.",
        "constituents-2": "This query selects all of the constituents and can be filtered by certain fields shown below. Note: filters are additive rather than or, so filtering two fields will only return records that match both.",
        "constituents-filters": "Valid filters are: <code class=\"red\">page</code>, <code class=\"red\">per_page</code>, <code class=\"red\">sort_field</code>, <code class=\"red\">sort</code>, <code class=\"red\">[ids]</code>, <code class=\"red\">gender</code>, <code class=\"red\">name</code>, <code class=\"red\">gender</code>, <code class=\"red\">beginDate</code>, <code class=\"red\">endDate</code>, <code class=\"red\">keyword</code>, <code class=\"red\">isMaker</code>, <code class=\"red\">role</code> and <code class=\"red\">lang</code>",
        "constituents-sorts": "Valid values for the <code class=\"red\">sort_field</code> are <code>id</code>, <code>name</code>, <code>sortNumber</code>, <code>alphaSortName</code>, <code>gender</code>, <code>beginDate</code>, <code>endDate</code>, <code>objectCount</code> and <code>nationality</code>, values for <code class=\"red\">sort</code> are <code>asc</code> and <code>desc</code>.",
        "constituents-call-for-ids": "Here is a simple call to get all constituent ids",
        "constituents-more-info": "Here is an example where more information is being called. Note: we can use the per_page filter to limit the number of results.",
        "constituents-sorting": "Here is an example of sorting by <code>alphaSortName</code>.",
        "constituents-by-ids-example": "You can also ask for specific constituents by passing in an array of <code>ids</code>.",
        "constituent-roles-title": "Constituent Roles",
        "constituent-roles-1": "‘Roles’ refers to the types of constituents that are within the dataset. You can get a list of all the constituent roles using the <code>makertypes</code> query. Note: this data will allow you to filter constituents by a single type in a constituent query. ",
        "constituents-by-roles": "Fetching by Roles",
        "constituents-by-roles-1": "You can fetch constituents by role. Here is an example of all the ‘Artist’ constituents ordered by number of related objects.",
        "constituent-1": "You can get a single constituent’s information by passing in the <code>id</code> parameter. Here we are showing all the fields possible.",
        "nesting-1": "When you are searching for objects, you can nest a limited version of constituents in the results. If you are requesting objects, you can get the constituents with the following ",
        "nesting-2": "If you are requesting a single object, you can retrieve more information about the constituents. See the example below.",
        "nesting-3": "You cannot keep nesting objects and constituents beyond the first two levels, because they would just keep including each other forever.",
        "nesting-4": "You can also nest constituents inside objects, but again with limited information returned, and only down two levels.",
        "connected-1": "<p>There are two ways to find objects related to a constituent.</p><p>1. To find all the objects created by an artist, run a query to find that artist and request the objects connected to them, as shown below.</p>",
        "connected-2": "2. You can also do a search on objects using the constituent <code>id</code> as a filter. This method is advantageous because it allows you to filter the results with other filters. The below query shows all objects related to a constituent filtered by specific medium. ",
        "exhibitions-1": "Exhibitions work similarly to constituents. See the following example for how to retrieve all exhibitions within the data set.",
        "exhibitions-2": "Again, you can also do this via the objects endpoint. Here's an example requesting all objects within a single exhibition in the category of ‘painting’, with ten results shown per page.",
        "exhibitions-3": "This will allow you to request all objects for an exhibition. To filter for a single exhibition’s content (for example text labels or artist bios), you will need to utilise the ‘purpose’ label.",
        "exhibition-1": "If you are interested in a specific exhibition and you know its id, you can request for a single exhibition. See the following example for Mapping Chinese Art, 1972–2012 <code>95</code>.",
        "text-entries": "Text Entries",
        "text-entries-1": "Text entries refer to supplemental information about objects and exhibitions including purpose, object description, and artist biographies.",
        "text-entries-2": "To fetch all valid purpose entries, run the following query.",
        "text-entries-3": "To fetch all valid object descriptions, run the following query. ",
        "text-entries-4": "To fetch all available artist biographies, run the following query.",
        "makertypes-1": "You can get a list of all the \"Types\" of constituent using the following query. Note, this allows you to filter constituents by a single type."
    },
    "sigg": {
        "getstarted": "There are additional API queries and pieces of content that have been made available for the development of this online exhibition. To view the current live site, please visit <a href=\"https://sigg.mplus.org.hk/\">sigg.mplus.org.hk</a>.",
        "getstarted-1": "If you are trying to work with Sigg Online data, you have a few more graphQL queries at your disposal. You also have concepts which are Artists and Artist Groups, and Exhibitions.",
        "objectrights": "An additional field on the object has been included to show the image rights for each object. Only objects with permission granted for specific usage can be displayed online. In future, access to the objects will be filtered by the server according to rights usage, but for now, image rights will need to be checked in this field before use.",
        "concepts-1": "Concepts include artistic groups and movements. To retrieve all concepts, use a query such as the following.",
        "concepts-2": "To fetch a single concept, use its id. For example, id <code>5</code> is that of ‘Cultural Revolution Art’.",
        "concepts-3": "There are two ways to get all objects related to a concept.<br />1. You can request the concept endpoint to include object data, passing in filters to affect objects.",
        "concepts-4": "2.You can request objects endpoint to filter specific concepts.",
        "exhibitions-1": "Exhibitions work the same way, you can get all exhibitions...",
        "exhibitions-2": "Or you can just get the one we are interested in, <strong>Siggs Online</strong> is Exhibition <code>95</code> this is a minimal example...",
        "exhibitions-3": "Again, you can do this via the objects endpoint. Here's a more fleshed out example for all objects in the Sigg Online exhibition with the category of \"Painting\" shown 10 per page.",
        "exhibitions-4": "Which should give you everything you need to string together showing objects for the exhibition. You will have to do some filtering to match the labels and bios with the exhibition using the \"purpose\" label.",
        "timeline-1": "There are historical and socio-political events made available for this online exhibition. To fetch the timeline content, there is a single call you can make. You can filter the language by using the <code>lang</code> parameter, set to either <code>en</code> or <code>zh-hant</code>. The call below includes all the fields—there are no other filters or parameters.",
        "bibliographies-1": "To retrieve all of the bibliographies, use a query such as the following.",
        "evolving": "The graphQL endpoints and this documentation will continue to evolve over the next few weeks, hang tight!"
    },
    "aboutapi": {
        "body": "<h2 class=\"title mt-2\">About the M+ API</h1>\r\n<hr/>\r\n<h3 class=\"s-title\" id=\"background\">Background<a class=\"anchor\" href=\"#background\" aria-hidden=\"true\"></a></h3>\r\n<p>\r\nM+ is building a collection of twentieth and twenty-first century visual culture, encompassing the disciplines of design and architecture, moving image, and visual art, grounded in Hong Kong with a global perspective. Geographically, the collections cover Hong Kong, mainland China, and regions across Asia and beyond. The M+ Collections are composed of the M+ Collection, the M+ Sigg Collection, and the M+ Collection Archives.\r\n</p><p>\r\nM+ is embracing open access and working towards releasing as much of our collections metadata as possible. Our goal is to unlock the museum’s institutional knowledge and release it into the public domain, driven by M+’s mission as a public institution. Read more about our open access journey <a target=\"_blank\" href=\"https://medium.com/mpluslabs/towards-open-access-at-m-9dcc0ae5dce7\">here</a> and <a target=\"_blank\" href=\"https://medium.com/mpluslabs/open-access-ahead-8dfe9984344d\">here</a>.\r\n </p><p>\r\nWe’ve released an open data set on <a target=\"_blank\" href=\"https://github.com/mplusmuseum/collection-data\">GitHub</a>, but are also sharing our data through a public API to help increase access and encourage creative projects. The M+ API will be available for anyone who’d like to work with it. It’s for developers, designers, artists, creators—anyone who’s curious about telling stories through data.\r\n </p><p>\r\nThe M+ API is built using GraphQL and will continue to be updated as new data becomes available. The documentation available here will also be updated periodically.\r\n </p><p>\r\nPlease contact us <a href=\"mailto:stories@mplus.org.hk\">here</a> with any questions regarding the API.\r\n</p>\r\n\r\n<h3 class=\"s-title\" id=\"thedata\">The Data<a class=\"anchor\" href=\"#background\" aria-hidden=\"true\"></a></h3>\r\n<p>\r\nThe data made available to you through this API service is a reflection of institutional knowledge developed over time at M+. This data has been created by curators, registrars, researchers, and scholars working in collaboration with M+ to describe, express, and interpret the objects held in the M+ Collections. This data is made available to you, the public, both as <a target=\"_blank\" href=\"https://creativecommons.org/publicdomain/zero/1.0/\">CC0 Open Data</a> and through this API service, for use by your websites, applications, and research projects.\r\n  </p><p>\r\nThis data is provided ‘as is’ for research purposes and you may use it at your own risk. Documentation of the museum’s collection is an ongoing process and we are continuing to research and enrich our collections data. We will update the dataset with new and revised information on a regular basis. M+ makes no representations or warranties of any kind on this data.\r\n </p>\r\n\r\n<h3 class=\"s-title\" id=\"access\">Technical Documentation and Access<a class=\"anchor\" href=\"#background\" aria-hidden=\"true\"></a></h3>\r\n\r\nTo access this API, you must <a href=\"http://api.mplus.org.hk/login\">register for an account</a>. All calls to the API require an API key, which will be granted to you upon registration.\r\nFor information on making use of this API, please see the technical documentation made available <a href=\"https://api.mplus.org.hk/en/documentation\">here</a>.\r\n"
    },
    "termsofuse": {
        "body": "<h2 class=\"title mt-2\">Terms of use</h2><hr /><h3 class=\"title is-6\">General</h3><ul><li>If you make use of this service, you are deemed to have accepted the terms and conditions listed here.</li><li>This data is provided ‘as is’ for research purposes and you may use it at your own risk.</li><li>Do not mislead others or misrepresent the data made available through this API.</li><li>You must not use the M+ trademark or derivatives of the M+ name, or otherwise claim or imply that M+ endorses you or your use of the data made available through this API.</li><li>Whenever you transform, translate, or otherwise modify this data, you must make it clear that the resulting information has been modified. If you enrich or otherwise modify the data, please consider publishing the derived data without reuse restrictions.</li><li>You may not use the M+ logo or brand on your website without the specific written permission of M+.</li><li>M+ reserves the right to extend or alter these terms and conditions at any time.</li></ul><h3 class=\"title is-6\">Rules of the road</h3><ul><li>M+ kindly requests that you inform us about your use of the API by emailing us a link to your project and describing how you are using this API service.</li><li>Additionally, M+ kindly requests that you actively acknowledge and give attribution to M+ wherever possible. If you use this dataset, please cite M+ as the source, using<ul><li>the digital object identifier [####], which is the objectNumber [ex. “2013.7”], and</li><li>the formal acknowledgement/attribution ‘source: M+, Hong Kong’, and</li><li>a link to our website: mplus.org.hk.</li></ul></li><li>M+ is periodically updating the data provided by this API. We ask that you not cache or store any content returned by the M+ API for more than two weeks without refreshing the data. If your application requires long term data caching, we ask that you contact us.</li><li>We reserve the right to turn off or modify the API service at any time.</li><li>We reserve the right to block or cancel your access to the API service without prior notice.</li><li>While the data made available through this API is licensed as CC0 data, the API service itself is meant for non-commercial use only. If you plan to use this service for commercial purposes, please contact us.</li></ul><p>The writers of these guidelines thank <a target=\"_blank\" href=\"http://github.com/harvardartmuseums/\">Harvard Art Museums</a> and <a target=\"_blank\" href=\"https://github.com/cooperhewitt/collection\">Cooper-Hewitt</a>.</p><h2 class=\"title is-5\">Contact us</h2><p>Please contact us <a href=\"mailto:stories@mplus.org.hk\">here</a> with any questions regarding the API.</p>"
    }
}