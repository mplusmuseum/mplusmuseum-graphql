{
  "general": {
    "mplusapi": "M+ API",
    "logout": "Logout",
    "login": "Log In/Sign Up"
  },
  "documentation": {
    "title": "API Documentation",
    "aboutapi": "About the M+ API",
    "background": "Background",
    "thedata": "The Data",
    "access": "Technical documentation and access",
    "documentation": "GraphQL Documentation",
    "apidocumentation": "GraphQL Documentation",
    "yourapitoken": "Your API Token",
    "apitoken": "API Token",
    "endpoint": "The M+ API Endpoint",
    "graphqlendpoint": "GraphQL API Endpoint",
    "intro": "Here you can find out all about how to make GraphQL calls. Remember you will need your developer key which you can always find on the main <a href=\"/developer\">Developers Help</a> page, but it's also here:",
    "note": " <strong>NOTE:</strong> This documentation is very new and evolving but should be enough to get you up and running, we will be expanding it in the near future.",
    "TOC": "Table of Contents",
    "about-graphql": "About GraphQL",
    "communicating-with-graphql": "Communicating with GraphQL",
    "graphql-playground": "GraphQL Playground",
    "graphql-queries": "GraphQL Queries",
    "introspection": "Introspection",
    "objects": "Objects",
    "paginationandfilter": "Pagination and filter example",
    "sorting": "Sorting example",
    "fetchingbyids": "Fetching by ids example",
    "object": "Object",
    "randomobjects": "Random Objects",
    "areas": "Areas",
    "categories": "Categories",
    "mediums": "Mediums",
    "archivallevels": "Archival Levels",
    "constituents": "Constituents",
    "constituent": "Constituent",
    "makertypes": "Maker Types",
    "must-be-logged-in": "You must be logged in to see the documentation",
    "sigg-online": "Sigg Online",
    "getting-started": "Getting Started",
    "object-rights": "Object Rights",
    "concepts": "Concepts",
    "exhibitions": "Exhibitions",
    "exhibition": "Exhibition",
    "timeline": "Timeline",
    "terms-of-use": "Terms of Use",
    "contact": "Contact",
    "privacy-policy-statement": "Privacy Policy Statement",
    "nesting": "Nesting objects in constituents and constituents in objects",
    "objects-connected-constituent": "Finding objects connected to a constituent",
    "curl": "cURL",
    "nodejs": "Node.js",
    "belowtoken": "Below is your API developer token, this is the token you'll use to sign all your API calls. Always try to keep your token private and out of public GitHub repositories.",
    "belowendpoint": "Below is the GraphQL endpoint which you'll be making your API calls against. See below for more details on how to structure calls.",
    "graphql-about-1": "GraphQL is a data query language you'll use to request information from the M+ data store. Traditionally GraphQL allows two types of operations, <em>queries</em> and <em>mutations</em> these can be thought of as <em>read</em> and <em>write</em> operations.",
    "graphql-about-2": "As well as one more operation called <em><a href=\"#introspection\">introspection</a></em>, which allows you to ask the GraphQL endpoint about itself.",
    "graphql-about-3": "Below you will find examples of various calls to can make to the GraphQL endpoint.",
    "graphql-communicating-1": "The single endpoint for all GraphQL calls is...",
    "graphql-communicating-2": "GraphQL operations consist of multiline JSON, an example \"Hello World\" GraphQL query is show below:",
    "graphql-communicating-3": "To query GraphQL using cURL, make a <code>POST</code> request with a JSON payload as <code>--data-binary</code>. You must also include your API token as <code>bearer</code> authorization.",
    "graphql-communicating-4": "Using Nodejs it may look like this, making sure to pass in your API token as a <code>bearer</code> token as shown.",
    "graphql-communicating-5": "Probably the easiest way to try out GraphQL queries is to use the playground which can be found here:",
    "graphql-communicating-6": "You can see an example by clicking the \"run in the playground\" link, you will need to press the \"run\" button to see the results of the query.",
    "graphql-communicating-7": "Below you'll find a list of the current queries you can make against the data store.",
    "run-in-playground": "Run in the playground",
    "graphql-introspection-1": "The <em>introspection</em> operation is the only operation you can call using <code>GET</code>. Introspection allows you to query the GraphQL schema for details about itself. Query <code class=\"red\">__schema</code> to list all types defined in the schema and get details about each:",
    "graphql-introspection-2": "Query <code class=\"red\">__type</code> to get details about any type:",
    "graphql-objects-1": "This query selects all of the objects and can be filtered by certain fields shown below. Note: filters are <em>additive</em> rather than <em>or</em>, filtering two fields will only return records that match both.",
    "graphql-objects-2": "Valid filters are: <code class=\"red\">page</code>, <code class=\"red\">per_page</code>, <code class=\"red\">[ids]</code>, <code class=\"red\">lang</code>, <code class=\"red\">sort</code>, <code class=\"red\">sort_field</code>, <code class=\"red\">objectNumber</code>, <code class=\"red\">area</code>, <code class=\"red\">category</code>, <code class=\"red\">archivalLevel</code>, <code class=\"red\">medium</code>, <code class=\"red\">title</code>, <code class=\"red\">displayDate</code>, <code class=\"red\">beginDate</code>, <code class=\"red\">endDate</code>, <code class=\"red\">constituent</code>, <code class=\"red\">[constituents]</code>, <code class=\"red\">exhibition</code>, and <code class=\"red\">keyword</code>",
    "graphql-objects-3": "Valid values for the <code class=\"red\">sort_field</code> are <code>id</code>, <code>objectNumber</code>, <code>sortNumber</code>, <code>title</code>, <code>displayDate</code>, <code>beginDate</code>, <code>endDate</code>, <code>popularCount</code>, <code>area</code>, <code>medium</code>, <code>archivalLevel</code> and <code>category</code>, values for <code class=\"red\">sort</code> are <code>asc</code> and <code>desc</code>.",
    "valid-lang": "The only valid values for <code class=\"red\">lang</code> are <code>en</code>, and <code>zh-hant</code>. The default is <code>en</code>, if a record doesn't have values that match the selected language then it'll return the <code>en</code> version if there is one.",
    "graphql-objects-5": "Here is the simplest call to get all object ids",
    "object-pagination": "Here we are asking for slightly more information, note how we can use the <code class=\"red\">per_page</code> filter to limit the number of results.",
    "object-sort-example": "Here is an example of sorting by <code>sortNumber</code>.",
    "object-by-ids-example": "You can also ask for specific objects by passing in an array of <code class=\"red\">ids</code>.",

    "filter-by-colours": "Filtering/Searching by Color",
    "filter-by-colours-1": "If you wish to search for objects by colour, you can do that with the following filters: <code class=\"red\">color</code>, <code class=\"red\">color_threshold</code> &amp; <code class=\"red\">color_source</code>.",
    "filter-by-colours-2": "There are two sources: <code>google</code> and <code>cloudinary</code>, the default is google and these are the following valid colours.",
    "filter-by-colours-3": "Cloudinary decided that the following were <em>slightly</em> more useful, if you do too then specify <code>cloudinary</code> as your <code class=\"red\">color_source</code>.",
    "filter-by-colours-4": "Finally you can specify the <code class=\"red\">color_threshold</code> if you want a value different to the default of 75.0. Valid values are floats between 0.0 and 100.0, the higher the threshold the fewer the results.",
    "filter-by-colours-5": "You can also ask for <code>predominant</code> colors in the results, which will return you hex values of the predominant colours. See the example below.",

    "object-1": "You can get a single object by passing in the <code class=\"red\">id</code> parameter. Here we are showing <em>all</em> the fields possible.",
    "areas-1": "You can fetch all the valid areas which you can then use to filter objects by. For example running the query below will return a handful of areas, which you would then use in an Object query with <code>(area: \"xxxxxxxx\")</code> where \"xxxxxxxx\" is one of the areas returned by this query.",
    "aggs-filters": "Valid filters are <code class=\"red\">page</code>, <code class=\"red\">per_page</code>, <code class=\"red\">lang</code>, <code class=\"red\">sort</code> and <code class=\"red\">sort_field</code>.",
    "aggs-sort": "Valid values for the <code class=\"red\">sort_field</code> are <code>title</code> and <code>count</code>. Valid values for the <code class=\"red\">sort</code> are <code>asc</code> and <code>desc</code>.",
    "aggs-per-page": "The <code class=\"red\">per_page</code> filter will limit the number of results, for example <code>(per_page: 10)</code> will return just 10 records. Unlike Objects you cannot paginate through this data set.",
    "category-1": "You can fetch all the valid categories which you can then use to filter objects by. For example running the query below will return a handful of categories, which you would then use in an Object query with <code>(category: \"xxxxxxxx\")</code> where \"xxxxxxxx\" is one of the categories returned by this query.",
    "medium-1": "You can fetch all the valid mediums which you can then use to filter objects by. For example running the query below will return a handful of mediums, which you would then use in an Object query with <code>(medium: \"xxxxxxxx\")</code> where \"xxxxxxxx\" is one of the mediums returned by this query.",
    "archivalLevel-1": "You can fetch all the valid archival levels which you can then use to filter objects by. For example running the query below will return a handful of levels, which you would then use in an Object query with <code>(archivalLevel: \"xxxxxxxx\")</code> where \"xxxxxxxx\" is one of the level returned by this query.",
    "constituents-1": "Constituents are people and institutions connected to an object, for example they may be the artists or the seller or buyer, they may be the curator or the institution the displays the object.",
    "constituents-2": "This query selects all of the constituents and can be filtered by certain fields shown below. Note: filters are <em>additive</em> rather than <em>or</em>, filtering two fields will only return records that match both.",
    "constituents-filters": "Valid filters are: <code class=\"red\">page</code>, <code class=\"red\">per_page</code>, <code class=\"red\">sort_field</code>, <code class=\"red\">sort</code>, <code class=\"red\">[ids]</code>, <code class=\"red\">gender</code>, <code class=\"red\">name</code>, <code class=\"red\">gender</code>, <code class=\"red\">beginDate</code>, <code class=\"red\">endDate</code>, <code class=\"red\">keyword</code>, <code class=\"red\">isMaker</code>, <code class=\"red\">role</code> and <code class=\"red\">lang</code>",
    "constituents-sorts": "Valid values for the <code class=\"red\">sort_field</code> are <code>id</code>, <code>name</code>, <code>sortNumber</code>, <code>alphaSortName</code>, <code>gender</code>, <code>beginDate</code>, <code>endDate</code>, <code>objectCount</code> and <code>nationality</code>, values for <code class=\"red\">sort</code> are <code>asc</code> and <code>desc</code>.",
    "constituents-call-for-ids": "Here is the simplest call to get all constituent ids",
    "constituents-more-info": "Here we are asking for slightly more information, note how we can use the <code class=\"red\">per_page</code> filter to limit the number of results.",
    "constituents-sorting": "Here is an example of sorting by <code>alphaSortName</code>.",
    "constituents-by-ids-example": "You can also ask for specific constituents by passing in an array of <code class=\"red\">ids</code>.",

    "constituents-by-roles": "Fetching by roles example",
    "constituents-by-roles-1": "If you wanted to find all the \"Artists\" constituents ordered by the ones who had the most objects in the <em>whole</em> system, then you can do it with the following query.",

    "constituent-1": "You can get a single constituent by passing in the <code class=\"red\">id</code> parameter. Here we are showing <em>all</em> the fields possible.",
    "nesting-1": "When you are searching for objects you can nest a limited version of constituents in the results. If you are requesting <strong>Objects</strong> you can get the constituents with the following query.",
    "nesting-2": "If you are asking for a single Object then you can get a bit more information about the constituents, see the example below.",
    "nesting-3": "You cannot keep nesting objects and constituents beyond the first two levels, because they would just keep including each other forever.",
    "nesting-4": "You can also nest constituents inside objects, but again with limited information returned and only down two levels.",
    "connected-1": "There are two ways to find objects connected to a constituent. If we wanted to find all the objects created by an artist we can run a query to find that artist and request the objects connected to them within the query, as shown below.",
    "connected-2": "You can also do a search on objects using the constituent ID as a filter. The advantage of the second way allows you to filter the results with other filters. The below query shows all the objects curated by a user with a certain medium type.",

    "exhibitions-1": "Exhibitions work the same way, you can get all exhibitions...",
    "exhibitions-2": "Again, you can do this via the objects endpoint. Here's a more fleshed out example for all objects in the Sigg Online exhibition with the category of \"Painting\" shown 10 per page.",
    "exhibitions-3": "Which should give you everything you need to string together showing objects for the exhibition. You will have to do some filtering to match the labels and bios with the exhibition using the \"purpose\" label.",
    "exhibition-1": "Or you can just get the one we are interested in, <strong>Siggs Online</strong> is Exhibition <code>95</code> this is a minimal example...",

    "makertypes-1": "You can get a list of all the \"Types\" of constituent using the following query. Note, this allows you to filter constituents by a single type."

  },

  "sigg": {
    "getstarted": "How to get started with Exhibitions and so on",
    "getstarted-1": "If you are trying to work with Sigg Online data, you have a few more graphQL queries at your disposal. You also have concepts which are Artists and Artist Groups, and Exhibitions.",
    "objectrights": "As a vendor you have access to an extra field on the object that tells you the rights for displaying that object based on who you are. In the future your access to the objects will be filtered by the server, but for now you will have to check the rights here.",
    "concepts-1": "To get all concepts you used a query such as",
    "concepts-2": "And to fetch a single concept you can get it by id. Id 5 is that of the \"Cultural Revolution Art\" Artists movement",
    "concepts-3": "As usual you can get all objects for a concept two ways, you can ask the concept endpoint to include object data, and you can pass in the normal filters which will pass through to affect the objects, like this...",
    "concepts-4": "...or you can ask the objects endpoint to filter on the concept...",
    "exhibitions-1": "Exhibitions work the same way, you can get all exhibitions...",
    "exhibitions-2": "Or you can just get the one we are interested in, <strong>Siggs Online</strong> is Exhibition <code>95</code> this is a minimal example...",
    "exhibitions-3": "Again, you can do this via the objects endpoint. Here's a more fleshed out example for all objects in the Sigg Online exhibition with the category of \"Painting\" shown 10 per page.",
    "exhibitions-4": "Which should give you everything you need to string together showing objects for the exhibition. You will have to do some filtering to match the labels and bios with the exhibition using the \"purpose\" label.",
    "timeline-1": "There is a single call you can make to fetch the timeline related to Sigg. You can filter the language by using the <code class=\"red\">lang</code> parameter, set to either <code>en</code> or <code>zh-hant</code>. The call below includes all the fields, there are no other filters or parameters.",
    "evolving": "The graphQL endpoints and this documentation will continue to evolve over the next few weeks, hang tight!"
  },

  "aboutapi": {
    "body": "<h2 class=\"title mt-2\">About the M+ API</h1><hr/><h3 class=\"s-title\" id=\"background\">Background<a class=\"anchor\" href=\"#background\" aria-hidden=\"true\">#</a></h3><p>M+ is embracing open access and working towards releasing as much of our collections metadata as possible. Our goal is to unlock the museum’s institutional knowledge and release it into the public domain, driven by M+’s mission as a public institution. Read more about our open access journey <a href=\"https://medium.com/mpluslabs/towards-open-access-at-m-9dcc0ae5dce7\">here</a> and <a href=\"https://medium.com/mpluslabs/open-access-ahead-8dfe9984344d\">here</a>.</p><p>We’ve released an open data set here, but are also sharing our data through a public API to help increase access and encourage creative projects. The M+ API will be available for anyone who’d like to work with it. It’s for developers, designers, artists, creators—anyone who’s curious about telling stories through data.</p><h3 class=\"s-title\" id=\"thedata\">The Data<a class=\"anchor\" href=\"#thedata\" aria-hidden=\"true\">#</a></h3><p>The data made available to you through this API service is a reflection of institutional knowledge developed over time at M+. This data has been created by curators, registrars, researchers, and scholars working in collaboration with M+ to describe, express, and interpret the objects held in the M+ Collections. This data is made available to you, the public, as <a href=\"https://creativecommons.org/publicdomain/zero/1.0/\">CC0 Open Data</a> and through this API service, for use by your websites, applications, and research projects.</p><p>This data is provided ‘as is’ for research purposes and you may use it at your own risk. Documentation of the museum’s collection is an ongoing process and we are continuing to research and enrich our collections data. We will update the dataset with new and revised information on a regular basis. M+ makes no representations or warranties of any kind on this data.</p><h3 class=\"s-title\" id=\"access\">Technical documentation and access<a class=\"anchor\" href=\"#access\" aria-hidden=\"true\">#</a></h3><p>To access this API you must register for an account <a href=\"http://api.mplus.org.hk/login\">here</a>. All calls to the API require an API key, which will be granted to you upon registration of your account.</p><p>For information on making use of this API, please see the technical documentation made available <a href=\"https://api.mplus.org.hk/en/documentation\">here</a>.</p>"
  },
  "termsofuse": {
    "body": "<h2 class=\"title mt-2\">Terms of use</h2><hr /><h3 class=\"title is-6\">General</h3><ul><li>If you make use of this service, you are deemed to have accepted the terms and conditions listed here.</li><li>This data is provided ‘as is’ for research purposes and you may use it at your own risk. </li><li>Do not mislead others or misrepresent the data made available through this API. </li><li>You must not use the M+ trademark or derivatives of the M+ name, or otherwise claim or imply that M+ endorses you or your use of the data made available through this API.</li><li>Whenever you transform, translate, or otherwise modify this data, you must make it clear that the resulting information has been modified. If you enrich or otherwise modify the data, please consider publishing the derived data without reuse restrictions.</li><li>You may not use the M+ logo or brand on your website without the specific written permission of M+.</li><li>M+ reserves the right to extend or alter these terms and conditions at any time.</li></ul><h3 class=\"title is-6\">Rules of the road</h3><ul><li>M+ kindly requests that you inform us about your use of the API by emailing us a link to your project and describing how you are using this API service.</li><li>Additionally, M+ kindly requests that you actively acknowledge and give attribution to M+ wherever possible. If you use this dataset, please cite M+ as the source, using<ul><li>the digital object identifier [####], and</li><li>the formal acknowledgement/attribution ‘source: M+, Hong Kong’, and</li><li>a link to our website: mplus.org.hk.</li></ul></li><li>M+ is periodically updating the data provided by this API. We ask that you not cache or store any content returned by the M+ API for more than two weeks without refreshing the data. If your application requires long term data caching, we ask that you contact us.</li><li>We reserve the right to turn off or modify the API service at any time.</li><li> We reserve the right to block or cancel your access to the API service without prior notice.</li><li>While the data made available through this API is licensed as CC0 data, the API service itself is meant for non-commercial use only. If you plan to use this service for commercial purposes, please contact us.</li><li>Respect other users of the API by limiting the number of API calls to 3,000 per day, or 2 calls per second. We reserve the right to limit or suspend your use of the API if you exceed these rate limits.</li></ul><p>The writers of these guidelines thank <a href=\"http://github.com/harvardartmuseums/\">Harvard Art Museums</a> and <a href=\"https://github.com/cooperhewitt/collection\">Cooper-Hewitt</a>.</p><h2 class=\"title is-5\">Contact us</h2><p>Please contact us <a href=\"mailto:stories@mplus.org.hk\">here</a> with any questions regarding the API.</p>"
  }
}